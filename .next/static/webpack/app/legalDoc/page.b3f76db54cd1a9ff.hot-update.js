"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/legalDoc/page",{

/***/ "(app-pages-browser)/./types/index.ts":
/*!************************!*\
  !*** ./types/index.ts ***!
  \************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   convertToWordLikeComment: function() { return /* binding */ convertToWordLikeComment; }\n/* harmony export */ });\n// Utility function to convert LegalComment to Comment for WordLikeEditor\nfunction convertToWordLikeComment(legalComment, fullText) {\n    const severityMap = {\n        \"Must Change\": \"high\",\n        \"Recommend to Change\": \"medium\",\n        \"Negotiable\": \"low\"\n    };\n    // Calculate start and end positions using context-based matching\n    const { start, end } = findTextPosition(legalComment, fullText);\n    return {\n        id: legalComment.comment_id,\n        text: \"\".concat(legalComment.comment_title, \"\\n\\n\").concat(legalComment.comment_details, \"\\n\\nRecommendation: \").concat(legalComment.recommendation),\n        author: \"AI Legal Assistant\",\n        start,\n        end,\n        severity: severityMap[legalComment.severity]\n    };\n}\n// Helper function to find text position using context matching\nfunction findTextPosition(comment, fullText) {\n    const { context_before, original_text, context_after } = comment;\n    console.log(\"Finding position for comment:\", comment.comment_id);\n    console.log(\"Context before:\", JSON.stringify(context_before));\n    console.log(\"Original text:\", JSON.stringify(original_text));\n    console.log(\"Context after:\", JSON.stringify(context_after));\n    // Normalize whitespace for better matching\n    const normalizeText = (text)=>text.replace(/\\s+/g, \" \").trim();\n    const normalizedFullText = normalizeText(fullText);\n    // Try different search strategies in order of reliability\n    // Strategy 1: Full context match (most reliable)\n    if (context_before && context_after) {\n        const fullPattern = \"\".concat(context_before).concat(original_text).concat(context_after);\n        const normalizedPattern = normalizeText(fullPattern);\n        let fullMatch = fullText.indexOf(fullPattern);\n        if (fullMatch === -1) {\n            // Try with normalized whitespace\n            fullMatch = normalizedFullText.indexOf(normalizedPattern);\n            if (fullMatch !== -1) {\n                // Convert back to original text position\n                const beforeNormalized = normalizeText(context_before);\n                const beforeMatch = normalizedFullText.indexOf(beforeNormalized);\n                if (beforeMatch !== -1) {\n                    fullMatch = beforeMatch;\n                }\n            }\n        }\n        if (fullMatch !== -1) {\n            const start = fullMatch + context_before.length;\n            console.log(\"✅ Full context match found at position:\", start);\n            return {\n                start,\n                end: start + original_text.length\n            };\n        }\n    }\n    // Strategy 2: Before context + original text\n    if (context_before) {\n        const beforePattern = \"\".concat(context_before).concat(original_text);\n        let beforeMatch = fullText.indexOf(beforePattern);\n        if (beforeMatch === -1) {\n            // Try with normalized whitespace\n            const normalizedPattern = normalizeText(beforePattern);\n            beforeMatch = normalizedFullText.indexOf(normalizedPattern);\n        }\n        if (beforeMatch !== -1) {\n            const start = beforeMatch + context_before.length;\n            console.log(\"✅ Before context match found at position:\", start);\n            return {\n                start,\n                end: start + original_text.length\n            };\n        }\n    }\n    // Strategy 3: Original text + after context\n    if (context_after) {\n        const afterPattern = \"\".concat(original_text).concat(context_after);\n        let afterMatch = fullText.indexOf(afterPattern);\n        if (afterMatch === -1) {\n            // Try with normalized whitespace\n            const normalizedPattern = normalizeText(afterPattern);\n            afterMatch = normalizedFullText.indexOf(normalizedPattern);\n        }\n        if (afterMatch !== -1) {\n            console.log(\"✅ After context match found at position:\", afterMatch);\n            return {\n                start: afterMatch,\n                end: afterMatch + original_text.length\n            };\n        }\n    }\n    // Strategy 4: Exact text match (fallback)\n    let exactMatch = fullText.indexOf(original_text);\n    if (exactMatch === -1) {\n        // Try with normalized whitespace\n        const normalizedOriginal = normalizeText(original_text);\n        exactMatch = normalizedFullText.indexOf(normalizedOriginal);\n    }\n    if (exactMatch !== -1) {\n        console.log(\"✅ Exact text match found at position:\", exactMatch);\n        return {\n            start: exactMatch,\n            end: exactMatch + original_text.length\n        };\n    }\n    // Strategy 5: Fuzzy matching for similar text\n    const words = original_text.trim().split(/\\s+/);\n    if (words.length > 2) {\n        // Try to find a substring with most of the words\n        const firstHalf = words.slice(0, Math.ceil(words.length / 2)).join(\" \");\n        const secondHalf = words.slice(Math.floor(words.length / 2)).join(\" \");\n        let fuzzyMatch = fullText.indexOf(firstHalf);\n        if (fuzzyMatch === -1) {\n            fuzzyMatch = fullText.indexOf(secondHalf);\n        }\n        if (fuzzyMatch !== -1) {\n            console.log(\"✅ Fuzzy match found at position:\", fuzzyMatch);\n            return {\n                start: fuzzyMatch,\n                end: fuzzyMatch + original_text.length\n            };\n        }\n    }\n    // Strategy 6: Word-by-word search (last resort)\n    const firstWord = words[0];\n    if (firstWord && firstWord.length > 3) {\n        const wordMatch = fullText.indexOf(firstWord);\n        if (wordMatch !== -1) {\n            console.log(\"✅ First word match found at position:\", wordMatch);\n            return {\n                start: wordMatch,\n                end: wordMatch + original_text.length\n            };\n        }\n    }\n    // If all else fails, distribute comments evenly instead of position 0\n    console.warn(\"❌ Could not find text position for comment:\", comment.comment_id);\n    console.warn(\"Falling back to distributed positioning\");\n    // Use a hash of the comment ID to create consistent but distributed positioning\n    const hash = comment.comment_id.split(\"\").reduce((a, b)=>{\n        a = (a << 5) - a + b.charCodeAt(0);\n        return a & a;\n    }, 0);\n    const fallbackPosition = Math.abs(hash) % Math.max(1, Math.floor(fullText.length / 4));\n    return {\n        start: fallbackPosition,\n        end: fallbackPosition + original_text.length\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./types/index.ts\n"));

/***/ })

});