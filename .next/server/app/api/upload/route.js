/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/upload/route";
exports.ids = ["app/api/upload/route"];
exports.modules = {

/***/ "(rsc)/./node_modules/pdf-parse/lib/pdf.js sync recursive ^\\.\\/.*\\/build\\/pdf\\.js$":
/*!**************************************************************************!*\
  !*** ./node_modules/pdf-parse/lib/pdf.js/ sync ^\.\/.*\/build\/pdf\.js$ ***!
  \**************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var map = {
	"./v1.10.100/build/pdf.js": "(rsc)/./node_modules/pdf-parse/lib/pdf.js/v1.10.100/build/pdf.js",
	"./v1.10.88/build/pdf.js": "(rsc)/./node_modules/pdf-parse/lib/pdf.js/v1.10.88/build/pdf.js",
	"./v1.9.426/build/pdf.js": "(rsc)/./node_modules/pdf-parse/lib/pdf.js/v1.9.426/build/pdf.js",
	"./v2.0.550/build/pdf.js": "(rsc)/./node_modules/pdf-parse/lib/pdf.js/v2.0.550/build/pdf.js"
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	if(!__webpack_require__.o(map, req)) {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return map[req];
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = "(rsc)/./node_modules/pdf-parse/lib/pdf.js sync recursive ^\\.\\/.*\\/build\\/pdf\\.js$";

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "buffer":
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("buffer");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("events");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("https");

/***/ }),

/***/ "os":
/*!*********************!*\
  !*** external "os" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("os");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("stream");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("util");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("zlib");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fupload%2Froute&page=%2Fapi%2Fupload%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fupload%2Froute.ts&appDir=%2FUsers%2Flifanwang%2FLegal%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Flifanwang%2FLegal&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":
/*!******************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fupload%2Froute&page=%2Fapi%2Fupload%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fupload%2Froute.ts&appDir=%2FUsers%2Flifanwang%2FLegal%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Flifanwang%2FLegal&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!
  \******************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Users_lifanwang_Legal_app_api_upload_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/upload/route.ts */ \"(rsc)/./app/api/upload/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/upload/route\",\n        pathname: \"/api/upload\",\n        filename: \"route\",\n        bundlePath: \"app/api/upload/route\"\n    },\n    resolvedPagePath: \"/Users/lifanwang/Legal/app/api/upload/route.ts\",\n    nextConfigOutput,\n    userland: _Users_lifanwang_Legal_app_api_upload_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/upload/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZ1cGxvYWQlMkZyb3V0ZSZwYWdlPSUyRmFwaSUyRnVwbG9hZCUyRnJvdXRlJmFwcFBhdGhzPSZwYWdlUGF0aD1wcml2YXRlLW5leHQtYXBwLWRpciUyRmFwaSUyRnVwbG9hZCUyRnJvdXRlLnRzJmFwcERpcj0lMkZVc2VycyUyRmxpZmFud2FuZyUyRkxlZ2FsJTJGYXBwJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmcm9vdERpcj0lMkZVc2VycyUyRmxpZmFud2FuZyUyRkxlZ2FsJmlzRGV2PXRydWUmdHNjb25maWdQYXRoPXRzY29uZmlnLmpzb24mYmFzZVBhdGg9JmFzc2V0UHJlZml4PSZuZXh0Q29uZmlnT3V0cHV0PSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDYztBQUNGO0FBQzNFO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixnSEFBbUI7QUFDM0M7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZO0FBQ1osQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLFFBQVEsaUVBQWlFO0FBQ3pFO0FBQ0E7QUFDQSxXQUFXLDRFQUFXO0FBQ3RCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDdUg7O0FBRXZIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWktbGVnYWwtcmV2aWV3LWFzc2lzdGFudC8/OTM3MCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBSb3V0ZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IHBhdGNoRmV0Y2ggYXMgX3BhdGNoRmV0Y2ggfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvcGF0Y2gtZmV0Y2hcIjtcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCIvVXNlcnMvbGlmYW53YW5nL0xlZ2FsL2FwcC9hcGkvdXBsb2FkL3JvdXRlLnRzXCI7XG4vLyBXZSBpbmplY3QgdGhlIG5leHRDb25maWdPdXRwdXQgaGVyZSBzbyB0aGF0IHdlIGNhbiB1c2UgdGhlbSBpbiB0aGUgcm91dGVcbi8vIG1vZHVsZS5cbmNvbnN0IG5leHRDb25maWdPdXRwdXQgPSBcIlwiXG5jb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBBcHBSb3V0ZVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5BUFBfUk9VVEUsXG4gICAgICAgIHBhZ2U6IFwiL2FwaS91cGxvYWQvcm91dGVcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS91cGxvYWRcIixcbiAgICAgICAgZmlsZW5hbWU6IFwicm91dGVcIixcbiAgICAgICAgYnVuZGxlUGF0aDogXCJhcHAvYXBpL3VwbG9hZC9yb3V0ZVwiXG4gICAgfSxcbiAgICByZXNvbHZlZFBhZ2VQYXRoOiBcIi9Vc2Vycy9saWZhbndhbmcvTGVnYWwvYXBwL2FwaS91cGxvYWQvcm91dGUudHNcIixcbiAgICBuZXh0Q29uZmlnT3V0cHV0LFxuICAgIHVzZXJsYW5kXG59KTtcbi8vIFB1bGwgb3V0IHRoZSBleHBvcnRzIHRoYXQgd2UgbmVlZCB0byBleHBvc2UgZnJvbSB0aGUgbW9kdWxlLiBUaGlzIHNob3VsZFxuLy8gYmUgZWxpbWluYXRlZCB3aGVuIHdlJ3ZlIG1vdmVkIHRoZSBvdGhlciByb3V0ZXMgdG8gdGhlIG5ldyBmb3JtYXQuIFRoZXNlXG4vLyBhcmUgdXNlZCB0byBob29rIGludG8gdGhlIHJvdXRlLlxuY29uc3QgeyByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcyB9ID0gcm91dGVNb2R1bGU7XG5jb25zdCBvcmlnaW5hbFBhdGhuYW1lID0gXCIvYXBpL3VwbG9hZC9yb3V0ZVwiO1xuZnVuY3Rpb24gcGF0Y2hGZXRjaCgpIHtcbiAgICByZXR1cm4gX3BhdGNoRmV0Y2goe1xuICAgICAgICBzZXJ2ZXJIb29rcyxcbiAgICAgICAgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZVxuICAgIH0pO1xufVxuZXhwb3J0IHsgcm91dGVNb2R1bGUsIHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBvcmlnaW5hbFBhdGhuYW1lLCBwYXRjaEZldGNoLCAgfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwLXJvdXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fupload%2Froute&page=%2Fapi%2Fupload%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fupload%2Froute.ts&appDir=%2FUsers%2Flifanwang%2FLegal%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Flifanwang%2FLegal&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/upload/route.ts":
/*!*********************************!*\
  !*** ./app/api/upload/route.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_file_processor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/file-processor */ \"(rsc)/./lib/file-processor.ts\");\n\n\nasync function POST(request) {\n    try {\n        console.log(\"Upload API called\");\n        const formData = await request.formData();\n        const file = formData.get(\"file\");\n        if (!file) {\n            console.log(\"No file provided\");\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                error: \"No file provided\"\n            }, {\n                status: 400\n            });\n        }\n        console.log(\"File details:\", {\n            name: file.name,\n            type: file.type,\n            size: file.size\n        });\n        const result = await (0,_lib_file_processor__WEBPACK_IMPORTED_MODULE_1__.processFile)(file);\n        console.log(\"Process file result:\", result);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: result.success,\n            data: result\n        });\n    } catch (error) {\n        console.error(\"Upload API error:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            error: error instanceof Error ? error.message : \"Failed to process file\"\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9hcHAvYXBpL3VwbG9hZC9yb3V0ZS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBdUQ7QUFDTDtBQUczQyxlQUFlRSxLQUFLQyxPQUFvQjtJQUM3QyxJQUFJO1FBQ0ZDLFFBQVFDLEdBQUcsQ0FBQztRQUNaLE1BQU1DLFdBQVcsTUFBTUgsUUFBUUcsUUFBUTtRQUN2QyxNQUFNQyxPQUFPRCxTQUFTRSxHQUFHLENBQUM7UUFFMUIsSUFBSSxDQUFDRCxNQUFNO1lBQ1RILFFBQVFDLEdBQUcsQ0FBQztZQUNaLE9BQU9MLHFEQUFZQSxDQUFDUyxJQUFJLENBQUM7Z0JBQ3ZCQyxTQUFTO2dCQUNUQyxPQUFPO1lBQ1QsR0FBRztnQkFBRUMsUUFBUTtZQUFJO1FBQ25CO1FBRUFSLFFBQVFDLEdBQUcsQ0FBQyxpQkFBaUI7WUFDM0JRLE1BQU1OLEtBQUtNLElBQUk7WUFDZkMsTUFBTVAsS0FBS08sSUFBSTtZQUNmQyxNQUFNUixLQUFLUSxJQUFJO1FBQ2pCO1FBRUEsTUFBTUMsU0FBUyxNQUFNZixnRUFBV0EsQ0FBQ007UUFDakNILFFBQVFDLEdBQUcsQ0FBQyx3QkFBd0JXO1FBRXBDLE9BQU9oQixxREFBWUEsQ0FBQ1MsSUFBSSxDQUFDO1lBQ3ZCQyxTQUFTTSxPQUFPTixPQUFPO1lBQ3ZCTyxNQUFNRDtRQUNSO0lBQ0YsRUFBRSxPQUFPTCxPQUFPO1FBQ2RQLFFBQVFPLEtBQUssQ0FBQyxxQkFBcUJBO1FBRW5DLE9BQU9YLHFEQUFZQSxDQUFDUyxJQUFJLENBQUM7WUFDdkJDLFNBQVM7WUFDVEMsT0FBT0EsaUJBQWlCTyxRQUFRUCxNQUFNUSxPQUFPLEdBQUc7UUFDbEQsR0FBRztZQUFFUCxRQUFRO1FBQUk7SUFDbkI7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLWxlZ2FsLXJldmlldy1hc3Npc3RhbnQvLi9hcHAvYXBpL3VwbG9hZC9yb3V0ZS50cz9hODhkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5leHRSZXF1ZXN0LCBOZXh0UmVzcG9uc2UgfSBmcm9tICduZXh0L3NlcnZlcidcbmltcG9ydCB7IHByb2Nlc3NGaWxlIH0gZnJvbSAnQC9saWIvZmlsZS1wcm9jZXNzb3InXG5pbXBvcnQgdHlwZSB7IEFjdGlvblJlc3BvbnNlLCBGaWxlVXBsb2FkUmVzcG9uc2UgfSBmcm9tICdAL3R5cGVzJ1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gUE9TVChyZXF1ZXN0OiBOZXh0UmVxdWVzdCk6IFByb21pc2U8TmV4dFJlc3BvbnNlPEFjdGlvblJlc3BvbnNlPEZpbGVVcGxvYWRSZXNwb25zZT4+PiB7XG4gIHRyeSB7XG4gICAgY29uc29sZS5sb2coJ1VwbG9hZCBBUEkgY2FsbGVkJylcbiAgICBjb25zdCBmb3JtRGF0YSA9IGF3YWl0IHJlcXVlc3QuZm9ybURhdGEoKVxuICAgIGNvbnN0IGZpbGUgPSBmb3JtRGF0YS5nZXQoJ2ZpbGUnKSBhcyBGaWxlXG4gICAgXG4gICAgaWYgKCFmaWxlKSB7XG4gICAgICBjb25zb2xlLmxvZygnTm8gZmlsZSBwcm92aWRlZCcpXG4gICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oe1xuICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgZXJyb3I6ICdObyBmaWxlIHByb3ZpZGVkJ1xuICAgICAgfSwgeyBzdGF0dXM6IDQwMCB9KVxuICAgIH1cbiAgICBcbiAgICBjb25zb2xlLmxvZygnRmlsZSBkZXRhaWxzOicsIHtcbiAgICAgIG5hbWU6IGZpbGUubmFtZSxcbiAgICAgIHR5cGU6IGZpbGUudHlwZSxcbiAgICAgIHNpemU6IGZpbGUuc2l6ZVxuICAgIH0pXG4gICAgXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcHJvY2Vzc0ZpbGUoZmlsZSlcbiAgICBjb25zb2xlLmxvZygnUHJvY2VzcyBmaWxlIHJlc3VsdDonLCByZXN1bHQpXG4gICAgXG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHtcbiAgICAgIHN1Y2Nlc3M6IHJlc3VsdC5zdWNjZXNzLFxuICAgICAgZGF0YTogcmVzdWx0XG4gICAgfSlcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdVcGxvYWQgQVBJIGVycm9yOicsIGVycm9yKVxuICAgIFxuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7XG4gICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgIGVycm9yOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6ICdGYWlsZWQgdG8gcHJvY2VzcyBmaWxlJ1xuICAgIH0sIHsgc3RhdHVzOiA1MDAgfSlcbiAgfVxufSAiXSwibmFtZXMiOlsiTmV4dFJlc3BvbnNlIiwicHJvY2Vzc0ZpbGUiLCJQT1NUIiwicmVxdWVzdCIsImNvbnNvbGUiLCJsb2ciLCJmb3JtRGF0YSIsImZpbGUiLCJnZXQiLCJqc29uIiwic3VjY2VzcyIsImVycm9yIiwic3RhdHVzIiwibmFtZSIsInR5cGUiLCJzaXplIiwicmVzdWx0IiwiZGF0YSIsIkVycm9yIiwibWVzc2FnZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./app/api/upload/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/file-processor.ts":
/*!*******************************!*\
  !*** ./lib/file-processor.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   findTextPosition: () => (/* binding */ findTextPosition),\n/* harmony export */   preprocessText: () => (/* binding */ preprocessText),\n/* harmony export */   processFile: () => (/* binding */ processFile)\n/* harmony export */ });\n/* harmony import */ var pdf_parse__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pdf-parse */ \"(rsc)/./node_modules/pdf-parse/index.js\");\n/* harmony import */ var pdf_parse__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(pdf_parse__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var mammoth__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! mammoth */ \"(rsc)/./node_modules/mammoth/lib/index.js\");\n/* harmony import */ var jszip__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! jszip */ \"(rsc)/./node_modules/jszip/lib/index.js\");\n/* harmony import */ var jszip__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(jszip__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\nasync function processFile(file) {\n    try {\n        if (!file) {\n            return {\n                success: false,\n                error: \"No file provided\"\n            };\n        }\n        const fileType = file.type;\n        console.log(\"Processing file type:\", fileType);\n        let text = \"\";\n        let wordComments = [];\n        if (fileType === \"application/pdf\") {\n            console.log(\"Processing as PDF\");\n            text = await processPDF(file);\n        } else if (fileType === \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\" || fileType === \"application/msword\") {\n            console.log(\"Processing as Word document\");\n            const result = await processDOCX(file);\n            text = result.text;\n            wordComments = result.wordComments;\n        } else {\n            return {\n                success: false,\n                error: \"Unsupported file type. Please upload a PDF or Word document.\"\n            };\n        }\n        if (!text.trim()) {\n            return {\n                success: false,\n                error: \"No text content found in the file\"\n            };\n        }\n        console.log(\"File processed successfully, text length:\", text.length);\n        console.log(\"Word comments found:\", wordComments.length);\n        console.log(\"Word comments:\", wordComments);\n        return {\n            success: true,\n            text,\n            wordComments: wordComments.length > 0 ? wordComments : undefined\n        };\n    } catch (error) {\n        console.error(\"Error processing file:\", error);\n        return {\n            success: false,\n            error: error instanceof Error ? error.message : \"Unknown error occurred\"\n        };\n    }\n}\nasync function processPDF(file) {\n    const arrayBuffer = await file.arrayBuffer();\n    const buffer = Buffer.from(arrayBuffer);\n    const data = await pdf_parse__WEBPACK_IMPORTED_MODULE_0___default()(buffer);\n    return data.text;\n}\nasync function processDOCX(file) {\n    const arrayBuffer = await file.arrayBuffer();\n    const buffer = Buffer.from(arrayBuffer);\n    try {\n        // Convert to HTML to get the main text with better formatting preservation\n        const htmlResult = await mammoth__WEBPACK_IMPORTED_MODULE_1__.convertToHtml({\n            buffer\n        });\n        // Convert HTML to text while preserving line breaks\n        let text = htmlResult.value.replace(/<p[^>]*>/g, \"\\n\") // Convert paragraph tags to line breaks\n        .replace(/<\\/p>/g, \"\\n\") // End paragraphs with line breaks\n        .replace(/<br[^>]*>/g, \"\\n\") // Convert br tags to line breaks\n        .replace(/<[^>]*>/g, \"\") // Remove remaining HTML tags\n        .replace(/&nbsp;/g, \" \") // Convert non-breaking spaces\n        .replace(/&amp;/g, \"&\") // Convert HTML entities\n        .replace(/&lt;/g, \"<\").replace(/&gt;/g, \">\").replace(/&quot;/g, '\"').replace(/&#39;/g, \"'\").replace(/\\n{3,}/g, \"\\n\\n\") // Normalize multiple line breaks to max 2\n        .trim();\n        console.log(\"Extracted text length:\", text.length);\n        console.log(\"Text preview with line breaks:\", text.substring(0, 500));\n        // Try to extract comments from the buffer directly using comprehensive methods\n        const wordComments = await extractWordCommentsComprehensive(arrayBuffer);\n        return {\n            text,\n            wordComments\n        };\n    } catch (error) {\n        console.error(\"Error processing DOCX:\", error);\n        return {\n            text: \"\",\n            wordComments: []\n        };\n    }\n}\nasync function extractWordCommentsComprehensive(buffer) {\n    const comments = [];\n    try {\n        // Try to use JSZip to properly extract and parse the Word document structure\n        const zip = await jszip__WEBPACK_IMPORTED_MODULE_2___default().loadAsync(buffer);\n        console.log(\"Looking for Word document comment files...\");\n        // Check if comments.xml exists in the Word document\n        const commentsFile = zip.file(\"word/comments.xml\");\n        if (commentsFile) {\n            console.log(\"Found word/comments.xml, extracting structured comments...\");\n            const commentsXml = await commentsFile.async(\"string\");\n            console.log(\"Comments XML preview:\", commentsXml.substring(0, 500));\n            // Parse the XML properly\n            const commentMatches = commentsXml.match(/<w:comment[^>]*>[\\s\\S]*?<\\/w:comment>/g);\n            if (commentMatches) {\n                commentMatches.forEach((commentXml, index)=>{\n                    try {\n                        // Extract author\n                        const authorMatch = commentXml.match(/w:author=\"([^\"]*)\"/);\n                        const author = authorMatch ? authorMatch[1] : `Commenter ${index + 1}`;\n                        // Extract date\n                        const dateMatch = commentXml.match(/w:date=\"([^\"]*)\"/);\n                        const date = dateMatch ? dateMatch[1] : new Date().toISOString();\n                        // Extract initials as fallback author\n                        const initialsMatch = commentXml.match(/w:initials=\"([^\"]*)\"/);\n                        const finalAuthor = author || (initialsMatch ? initialsMatch[1] : `Commenter ${index + 1}`);\n                        // Extract text content properly\n                        const textElements = commentXml.match(/<w:t[^>]*>([^<]*)<\\/w:t>/g);\n                        let commentText = \"\";\n                        if (textElements) {\n                            commentText = textElements.map((element)=>{\n                                const textMatch = element.match(/<w:t[^>]*>([^<]*)<\\/w:t>/);\n                                return textMatch ? textMatch[1] : \"\";\n                            }).filter((text)=>text.trim().length > 0).join(\" \").trim();\n                        }\n                        if (commentText && commentText.length > 0 && !commentText.includes(\"\")) {\n                            console.log(`Extracted clean comment by ${finalAuthor}: ${commentText.substring(0, 100)}...`);\n                            comments.push({\n                                id: `word-comment-${comments.length + 1}`,\n                                text: cleanCommentText(commentText),\n                                author: finalAuthor,\n                                date: formatDate(date),\n                                position: {\n                                    start: 0,\n                                    end: 0\n                                },\n                                type: \"word-comment\"\n                            });\n                        }\n                    } catch (parseError) {\n                        console.error(\"Error parsing individual comment:\", parseError);\n                    }\n                });\n            }\n        }\n        // If no comments found in comments.xml, try alternative approach with document.xml\n        if (comments.length === 0) {\n            console.log(\"No comments in comments.xml, trying document.xml approach...\");\n            const documentFile = zip.file(\"word/document.xml\");\n            if (documentFile) {\n                const documentXml = await documentFile.async(\"string\");\n                // Look for comment reference ranges in the document\n                const commentRefs = documentXml.match(/<w:commentRangeStart[^>]*w:id=\"([^\"]*)\"[^>]*>/g);\n                if (commentRefs && commentsFile) {\n                    const commentsXml = await commentsFile.async(\"string\");\n                    commentRefs.forEach((ref, index)=>{\n                        const idMatch = ref.match(/w:id=\"([^\"]*)\"/);\n                        if (idMatch) {\n                            const commentId = idMatch[1];\n                            // Find the corresponding comment in comments.xml\n                            const commentPattern = new RegExp(`<w:comment[^>]*w:id=\"${commentId}\"[^>]*>([\\\\s\\\\S]*?)<\\\\/w:comment>`, \"g\");\n                            const commentMatch = commentPattern.exec(commentsXml);\n                            if (commentMatch) {\n                                const commentContent = commentMatch[0];\n                                const authorMatch = commentContent.match(/w:author=\"([^\"]*)\"/);\n                                const dateMatch = commentContent.match(/w:date=\"([^\"]*)\"/);\n                                const author = authorMatch ? authorMatch[1] : `Commenter ${index + 1}`;\n                                const date = dateMatch ? dateMatch[1] : new Date().toISOString();\n                                // Extract clean text\n                                const textElements = commentMatch[1].match(/<w:t[^>]*>([^<]*)<\\/w:t>/g);\n                                let commentText = \"\";\n                                if (textElements) {\n                                    commentText = textElements.map((element)=>{\n                                        const textMatch = element.match(/<w:t[^>]*>([^<]*)<\\/w:t>/);\n                                        return textMatch ? textMatch[1] : \"\";\n                                    }).filter((text)=>text.trim().length > 0).join(\" \").trim();\n                                }\n                                if (commentText && commentText.length > 0 && !commentText.includes(\"\")) {\n                                    console.log(`Extracted referenced comment by ${author}: ${commentText.substring(0, 100)}...`);\n                                    comments.push({\n                                        id: `word-comment-${comments.length + 1}`,\n                                        text: cleanCommentText(commentText),\n                                        author: author,\n                                        date: formatDate(date),\n                                        position: {\n                                            start: 0,\n                                            end: 0\n                                        },\n                                        type: \"word-comment\"\n                                    });\n                                }\n                            }\n                        }\n                    });\n                }\n            }\n        }\n        // If still no comments found, try mammoth's comment extraction as fallback\n        if (comments.length === 0) {\n            console.log(\"No comments found in XML files, trying mammoth extraction...\");\n            try {\n                const mammothBuffer = Buffer.from(buffer);\n                const result = await mammoth__WEBPACK_IMPORTED_MODULE_1__.convertToHtml({\n                    buffer: mammothBuffer\n                });\n                // Look for any comment-like patterns in the converted text\n                const htmlText = result.value;\n                if (htmlText.includes(\"comment\") || htmlText.includes(\"Comment\")) {\n                    console.log(\"Found potential comments in mammoth output, but extraction method needs improvement\");\n                // For now, we'll rely on the XML-based extraction above\n                }\n            } catch (mammothError) {\n                console.error(\"Mammoth fallback failed:\", mammothError);\n            }\n        }\n        if (comments.length > 0) {\n            console.log(`Successfully extracted ${comments.length} clean Word comments:`);\n            comments.forEach((comment, idx)=>{\n                console.log(`  ${idx + 1}. Author: ${comment.author}, Text: ${comment.text.substring(0, 100)}...`);\n            });\n        } else {\n            console.log(\"No readable Word comments found\");\n        }\n        return comments.slice(0, 10) // Limit to first 10 comments\n        ;\n    } catch (error) {\n        console.error(\"Error extracting Word comments:\", error);\n        // Final fallback: try the old method but with better text cleaning\n        try {\n            const uint8Array = new Uint8Array(buffer);\n            const decoder = new TextDecoder(\"utf-8\", {\n                fatal: false\n            });\n            const content = decoder.decode(uint8Array);\n            // Look for readable text patterns that might be comments\n            const readablePatterns = [\n                /(?:Lifan\\s+Wang|Wang,?\\s+Lifan|Coronado,?\\s+Andre|Andre\\s+Coronado)[\\s:]+([A-Za-z\\s,.\\-!?]{10,200})/gi,\n                /Comment[\\s:]+([A-Za-z\\s,.\\-!?]{10,200})/gi\n            ];\n            for (const pattern of readablePatterns){\n                let match;\n                while((match = pattern.exec(content)) !== null && comments.length < 5){\n                    const text = match[1]?.trim();\n                    if (text && !text.includes(\"\") && text.length > 10) {\n                        comments.push({\n                            id: `word-comment-${comments.length + 1}`,\n                            text: cleanCommentText(text),\n                            author: match[0].includes(\"Lifan\") ? \"Lifan Wang\" : match[0].includes(\"Coronado\") ? \"Coronado, Andre\" : \"Unknown Author\",\n                            date: new Date().toISOString(),\n                            position: {\n                                start: 0,\n                                end: 0\n                            },\n                            type: \"word-comment\"\n                        });\n                    }\n                }\n            }\n        } catch (fallbackError) {\n            console.error(\"Fallback extraction also failed:\", fallbackError);\n        }\n        return comments;\n    }\n}\nfunction cleanCommentText(text) {\n    return text.replace(/<[^>]*>/g, \"\") // Remove HTML/XML tags\n    .replace(/&[a-z]+;/gi, \"\") // Remove HTML entities\n    .replace(/\\s+/g, \" \") // Normalize whitespace\n    .replace(/[^\\x20-\\x7E\\u00A0-\\uFFFF]/g, \"\") // Remove control characters but keep unicode\n    .trim();\n}\nfunction formatDate(dateStr) {\n    try {\n        // Try to parse various date formats\n        const date = new Date(dateStr);\n        if (isNaN(date.getTime())) {\n            return new Date().toISOString();\n        }\n        return date.toISOString();\n    } catch  {\n        return new Date().toISOString();\n    }\n}\nfunction preprocessText(text) {\n    return text.replace(/\\r\\n/g, \"\\n\").replace(/\\r/g, \"\\n\").replace(/\\n{3,}/g, \"\\n\\n\").trim();\n}\nfunction findTextPosition(fullText, searchText) {\n    const startIndex = fullText.indexOf(searchText);\n    if (startIndex === -1) {\n        return null;\n    }\n    return {\n        start: startIndex,\n        end: startIndex + searchText.length\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/file-processor.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/pdf-parse","vendor-chunks/next","vendor-chunks/base64-js","vendor-chunks/safe-buffer","vendor-chunks/underscore","vendor-chunks/mammoth","vendor-chunks/bluebird","vendor-chunks/jszip","vendor-chunks/xmlbuilder","vendor-chunks/pako","vendor-chunks/lop","vendor-chunks/readable-stream","vendor-chunks/@xmldom","vendor-chunks/inherits","vendor-chunks/dingbat-to-unicode","vendor-chunks/util-deprecate","vendor-chunks/string_decoder","vendor-chunks/process-nextick-args","vendor-chunks/path-is-absolute","vendor-chunks/option","vendor-chunks/lie","vendor-chunks/isarray","vendor-chunks/immediate","vendor-chunks/core-util-is"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fupload%2Froute&page=%2Fapi%2Fupload%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fupload%2Froute.ts&appDir=%2FUsers%2Flifanwang%2FLegal%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Flifanwang%2FLegal&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();